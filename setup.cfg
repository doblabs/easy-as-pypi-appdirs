# This file exists within 'easy-as-pypi-appdirs':
#
#   https://github.com/doblabs/easy-as-pypi-appdirs#ðŸ›£
#
# Copyright Â© 2018-2022 Landon Bouma. All rights reserved.

# The setup.cfg file is mostly superceded by pyproject.toml,
# but not all tools support the newer, preferred config file.

# ***

# 2022-10-03: Babel does not support pyproject.toml.
# - See issue:
#   https://github.com/python-babel/babel/issues/777
#
# MAYBE/2022-10-03: It appears we still need a setup.py, e.g.,
#   python setup.py extract_messages
# Per: https://babel.pocoo.org/en/latest/setup.html
# - Is there a way to run `extract_messages` otherwise?
# - Should we keep a simple setup.py around just for this command?
#   - We'd also need to install setuptools.
#
# Babel i18n/l10n configuration.
#
# USAGE:
#
#   pip install Babel
#   python setup.py extract_messages
#
# SEE ALSO:
#
#   http://babel.pocoo.org/en/latest/setup.html#extract-messages
#
[extract_messages]
input_dirs = easy_as_pypi_appdirs
output_file = messages.pot

# ***

# Apparently flake8 has not adopted pyproject.toml support.
# - MAYBE/2022-10-03: Add plugin, such as Flake8-pyproject:
#   https://pypi.org/project/Flake8-pyproject/
[flake8]
# So that the user can call `flake8`, maintain an exclude list. (Another way
# to lint is via `make lint` or `tox -e flake8`, which call flake8 on exact
# paths, e.g., `flake8 setup.py source/ tests/`. Here we achieve same effect
# but by doing the opposite, being exclusive rather than inclusive.)
exclude =
    # The build directory, if not ignored, has 50 or so lintable files.
    build/
    # Docs' conf.py is modified Sphinx boilerplate. That does not lint.
    docs/conf.py
    docs/_themes/sphinx_rtd_theme/
    # Not ignoring .eggs adds 10 files.
    .eggs/
    # Not ignoring .tox adds tens of Ks files.
    .tox/
    # These directories don't contain any lintable files for flake8 to
    # find, but ignore them anyway to save whatever time globbing takes.
    dist/
    *.egg-info/
    .git/
    htmlcov/
    # The poetry-shell-lint/.env/ is from GitHub Actions checks.yaml `lint` task.
    poetry-shell-lint/.env/
    .pytest_cache/
    __pycache__
max-line-length = 89
# See list of error codes (we can list here to ignore):
#
#   https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes
#
# - Project-agnostic, universal behavior (that supports and enforces this
#   and similar projects' style guides, i.e., this developer's preferences):
#
#   - âœ“ W391: blank line at end of file
#
#       - (lb): Personal preference. So that, e.g., Vim's <C-End> is predictable
#               and goes to first column of an empty last line, rather than to
#               some unknown last column of a nonempty last line.
#
#   - âœ“ W503 line break before binary operator
#
#       - (lb): I'm with Knuth, for readability, because columns align.
#
#               Prefer this:
#
#                   if (some_thing
#                       and another
#                       and another_thing):
#
#               over this:
#
#                   if (some_thing and
#                       another and
#                       another_thing):
#
# - Project- and dependency-specific, less common options:
#
#   - âœ— W605 invalid escape sequence:
#
#       - Specific to some Click library usage.
#         - (lb): Was warned on regex, e.g., '\d{2}' was flagged.
#         - (lb): Was warned on escape in Click help string, e.g., 'blah \# blah'.
#
#   - âœ— E711 comparison to None should be 'if cond is None:'
#
#       - Specific to SQLAlchemy library.
#         - (lb): SQLAlchemy filter function honors `== None`, not `is None`, e.g.,
#                   query = query.filter(AlchemyFact.activity == None)
#
ignore = W391,W503

