# vim:tw=0:ts=2:sw=2:et:norl:ft=config

# This file exists within 'easy-as-pypi-appdirs':
#
#   https://github.com/doblabs/easy-as-pypi-appdirs#ðŸ›£

# This tox configuration is used when a dev runs `tox` locally
# (or, really, `make tox`, because Poetry).
# - Note that GitHub Actions runs its own matrix, to take
#   advantage of parallel processing, and eschews `tox`,
#   which runs singularly and sadly wastes your time.

[tox]

# Note the we test in decreasing Python version order, because you're
# likely developing against the latest Python. It's more feel-good if
# at least the most recent Python tests pass before older versions
# might start failing (because while developing, you'll `make test`
# against the latest Python, but you won't run `tox` until later,
# when you want to run all checks). So, if you're watching the `tox`
# output, at least (hopefully) the first check passes (because you've
# run `make test` before running `make tox`).

envlist = py{310,39,38,37,311}, check_all, lint, docs #, docs_linkcheck

# LATER/2022-10-02: Revisit `docs_linkcheck` after deploying.
# - Many links fail if you haven't released yet or published docs,
#   which is fine, you want to be prepared, but it's annoying when
#   `tox` yells at you about what you already know.
#envlist = py{310,39,38,37,311}, check_all, lint, docs, docs_linkcheck

# Note that we omit certain check(s) from `envlist` that are not enforced:
# - isort_check: Run manually with `make isort-check`, and maybe one day
#                we'll decide that we want to make the project compliant.

# Poetry suggests setting isolated_build. Also, without it, poetry-dynamic-versioning
# plugin fails, complaining "RuntimeError: Unable to detect version control system."
isolated_build = true

# The [testenv] section provides defaults to the other [testenv:TEST] sections.
[testenv]

# Below, we'll set basepython for each of the make-test tasks. Here, we
# specify the latest Python as the default for other tasks (flake8, etc.).
basepython = python3.10

# Specify command names called from `commands` section that should not cause
# a "not installed in virtualenv" warning.
allowlist_externals =
  bash
  make
  poetry
  # FIXME/2022-10-03 01:11: Remove this echo:
  echo

# We use the following default commands for separate sets of tasks:
# - The default `commands_pre` is used by most tasks -- test, checks, and
#   docs tasks -- but not by the lint task (which needs to poetry-install
#   a psuedo subproject, to avoid dependency conflicts).
#   - Note that `poetry install` ensures that packages match `poetry.lock`.
#     Also note that because tox is run by poetry (e.g., `poetry run tox`),
#     and because Poetry maintains a 1-to-1 relationship between projects
#     plus a Python version and the virtual environment path, that the
#     tasks below run using the same packages as your dev environment (i.e.,
#     what's under ~/.cache/pypoetry/virtualenvs/{project}-{hash}-py{vers}/).
# - The default `commands` is only used by the test tasks; all the other
#   tasks -- checks, lint, and docs -- specify their own custom `commands`.
#   - The default `commands` is useful so that each of the [testenv:py*]
#     tasks below don't have to duplicate the same command.
# - The default `commands_post` resets the Poetry environment after each
#   task, so that the developer doesn't find their shell using a different
#   version of Python than when they ran tox (because tox doesn't run in a
#   subshell, so `poetry env use` applies to the developer's environment).
commands_pre =
  poetry env use {basepython}
  poetry install --with dev,docs,test,extras --no-root --sync
commands =
  poetry run python -m pytest tests/ --import-mode importlib
commands_post =
  poetry env use {[testenv]basepython}

# ***

[testenv:py37]
basepython = python3.7

[testenv:py38]
basepython = python3.8

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

# Note that pre-release 3.11 is pinned to a specific version.
# - There might be a more arbitrary way to specify this, but this is
#   what I figured out in the five minutes after I saw this not work:
#     basepython = python3.11
# - Obvi, the issue is that 3.11 is a pre-release, so not a big concern.
#   - In fact, maybe it's good that we'll have to manually change this,
#     because any change to 3.11 release candidates are well within
#     their rights to break things (I'd assume).
[testenv:py311]
basepython = {homedir}/.pyenv/versions/3.11.0rc1/bin/python3

# FIXME/2022-10-02 20:02: Do we care about coverage? (From tox, at least)

# ***

# Runs assorted checks.
[testenv:check_all]
commands =
    # Calls `poetry check` to verify pyproject.toml.
    make check-config
    # Calls `twine check` to verify the build.
    make check-dist
    # Checks docstring conventions, per PEP 257:
    #   https://www.python.org/dev/peps/pep-0257/
    make check-pydocstyle

# ***

# Calls flake8 and doc8.
# - Note there's a dependency conflict between Sphinx and these tools,
#   so we use a separate Poetry shell that we have setup under a pseudo
#   subproject, poetry-shell-lint.
[testenv:lint]
commands_pre = bash -c "cd poetry-shell-lint/ && poetry install --no-root --sync"
commands = make lint

# ***

# Specify the BUILDDIR so docs are created in the tox temporary directory,
# - E.g., instead of calling simply
#     make docs
#   Set the build path to the temporary tox directory, so you don't overwrite
#   your local docs files (not that it really matters, but the point of tox is
#   to isolate operatios, and to keep changes separate from your local files,
#   so this smells more correct).
# - The `make docs` will effectively look like, e.g.,
#     make docs \
#       BUILDDIR=/path/to/project/.tox/docs/tmp \
#       SPHINXOPTS=
[testenv:docs]
commands =
    make docs \
        BUILDDIR={envtmpdir} \
        SPHINXOPTS={env:SPHINXOPTS_BUILD:''}

# The `make linkcheck` will effectively look like, e.g.,
#     make linkcheck \
#       BUILDDIR=/path/to/project/.tox/docs/tmp \
#       SPHINXOPTS=
[testenv:docs_linkcheck]
commands =
    make linkcheck \
        BUILDDIR={envtmpdir} \
        SPHINXOPTS={env:SPHINXOPTS_LINKCHECK:}

# ***

# Calls `isort --check-only` to verify import statements style.
[testenv:isort_check]
commands = make isort-check

