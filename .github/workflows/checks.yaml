name: Run checks

on:
  - push
    # What's the deal with pull_request vs. pull_request_target?
    # - If someone opens a PR from their fork, would this workflow
    #   run their (possibly malicious) code?
    #   https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks
  - pull_request

jobs:

  # *** TEST

  test:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: true
      matrix:
        #os: [ "ubuntu-latest", "macos-latest" ]
        #platform: [ubuntu-latest, macos-latest, windows-latest]
        #python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        platform: [ubuntu-latest]
        #python-version: ['3.8']
        python-version: ['3.7', '3.8']
    defaults:
      run:
        # Set the default shell, required for "windows-latest".
        shell: bash
    #runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     python -m pip install tox tox-gh-actions
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    # Per: https://github.com/snok/install-poetry/
    # - name: Load cached venv
    #   id: cached-poetry-dependencies
    #   uses: actions/cache@v2
    #   with:
    #     # I didn't test, but for ubuntu-latest and macos-latest, the path is:
    #     #   path: .venv
    #     # But the example that includes windows-latest uses a different path.
    #     #   https://github.com/snok/install-poetry/
    #     # {cache-dir}/virtualenvs
    #     path: ~/.cache
    #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    # Per: https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    - name: Load cached $HOME/.local
      uses: actions/cache@v2.1.6
      with:
        path: ~/.local
        key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    # FIXME/2022-10-03 16:15: Try this:
    # - name: Load cached venv
    #   id: cached-poetry-dependencies
    #   uses: actions/cache@v2.1.6
    #   with:
    #     #path: deployer/.venv
    #     path: .venv
    #     key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/pr-deployer.yml') }}
    # - name: Install deployer
    #   run: |
    #     #cd deployer
    #     #poetry install
    #     poetry install --no-interaction --no-root --with dev,docs,test,extras
    #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #run: poetry install --no-interaction --no-root
      run: poetry install --no-interaction --no-root --with dev,docs,test,extras

    # - name: Install dependencies
    #   # Similar to `make develop`, but don't need pseudo subproject.
    #   run: poetry install --no-interaction --with dev,docs,test,extras
    #   #run: poetry install --no-interaction --with dev,docs,test,extras --no-root --sync
    # FIXME/2022-09-28 01:24: Verify: Does tox run the whole Python version matrix itself?
    - name: Test
      #run: tox
      run: |
        # So the windows-latest works, use the environ, not a hardcoded path.
        #  source .venv/bin/activate
        source $VENV
        python -m pytest tests/
        #poetry run python -m pytest tests/ --import-mode importlib
        python -m coverage report
      env:
        PLATFORM: ${{ matrix.platform }}
    # NTHEN/2022-09-28 01:25: If tox runs all versions, then use matrix to make-test,
    # and take advantage of parallel jobs.
    # - Probably don't need `install tox ...` above.
    # - No, wait, see:
    #     https://hynek.me/articles/python-github-actions/
    #
    #- name: Test with pytest
    #  run: make test
    #  # env:
    #  #   PLATFORM: ${{ matrix.platform }}

  # *** LINT

  # SAVVY: While it might be nice to isolate jobs in separate Yaml files,
  # each file is its own workflow, and each workflow appears separately
  # under the Actions workflow list, so better (cleaner, IMO) to keep
  # all jobs related to the same push or PR within the same workflow
  # (at least when possible: workflows that run after checks complete,
  #  like the coverage workflow, cannot be combined herein).
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 doc8
        #python -m pip install black flake8 doc8
    - name: Lint
      run: make lint

  # *** DOCS

  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # SPIKE/2022-09-28 13:56: These:
    # - name: Dump github context
    #   run: echo "${GITHUB_CONTEXT}"
    #   shell: bash
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    # Works:
    - name: Dump repository name
      run: echo "${GITHUB_REPOSITORY#*/}"
      shell: bash
    # Nope, prints "${GITHUB_REPOSITORY#*/}":
    # - name: Dump repository name
    #   run: echo "${PROJNAME}"
    #   shell: bash
    #   env:
    #     PROJNAME: ${GITHUB_REPOSITORY#*/}
    # Trying again:
    - name: Dump repository name
      run: echo "PROJNAME=$(echo "${GITHUB_REPOSITORY#*/}")" >> $GITHUB_ENV
      shell: bash
    # Blank (so env not available later steps, at least not by default):
    - name: Dump PROJNAME
      run: echo "${PROJNAME}"
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pydocstyle Sphinx sphinx_rtd_theme
    # - name: Clean docs
    #   run: |
    #     make -C docs clean BUILDDIR=_build
    #     # /bin/rm -f docs/${{ github.event.repository.name }}.*rst
    #     # /bin/rm -f docs/${{ github.event.pull_request.base.repo.name }}.*rst
    #     /bin/rm -f "docs/${GITHUB_REPOSITORY#*/}.*rst"
    #     /bin/rm -f "docs/modules.rst"
    # - name: Install package
    #   run: python setup.py install
    - name: Install package
      run: make install
    # - name: Generate HTML docs
    #   run: |
    #     sphinx-apidoc --force -o docs/ "${PROJNAME}"
    #     make -C docs clean
    #     make -C docs html
    - name: Docs build
      run: make docs-html

  # *** DIST

  dist-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Not needed:
        #   python -m pip install setuptools twine wheel
        python -m pip install build
        # FIXME: These needed?
        #python -m pip install twine wheel
        python -m pip install twine
    # - name: Build dist
    #   run: |
    #     python setup.py sdist
    #     python setup.py bdist_wheel
    # - name: Check dist
    #   run: twine check dist/*
    - name: Dist check
      run: make check-dist

  # *** MANIFEST

  # manifest:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.10.7
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install check-manifest
  #   # - name: Check manifest
  #   #   run: check-manifest -v
  #   - name: Manifest check
  #     run: make check-manifest

  poetrycheck:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install Poetry
      uses: snok/install-poetry@v1
      # with:
      #   virtualenvs-create: true
      #   virtualenvs-in-project: true
  # FIXME/2022-10-03 16:12: Try caching.
    # - name: Load cached venv
    #   id: cached-poetry-dependencies
    #   uses: actions/cache@v2
    #   with:
    #     # I didn't test, but for ubuntu-latest and macos-latest, the path is:
    #     #   path: .venv
    #     # But the example that includes windows-latest uses a different path.
    #     #   https://github.com/snok/install-poetry/
    #     # {cache-dir}/virtualenvs
    #     path: ~/.cache
    #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    # - name: Load cached $HOME/.local
    #   uses: actions/cache@v2.1.6
    #   with:
    #     path: ~/.local
    #     key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #run: poetry install --no-interaction --no-root
      run: poetry install --no-interaction --no-root --with dev,docs,test,extras
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     python -m pip install check-manifest
    # # - name: Check manifest
    # #   run: check-manifest -v
    # - name: Manifest check
    #   run: make check-manifest
    - name: Poetry check
      run: poetry check

  # *** PYDOCSTYLE

  # Note that adding Docstrings can be tedious. For many projects, they
  # might not add value. So oftentimes you'll want to disable this job:
  #
  #   pydocstyle:
  #     if: ${{ false }}

  pydocstyle:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pydocstyle toml
    - name: Docstring check
      run: make check-pydocstyle

  # *** COVERAGE

  coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install coverage pytest-cov
        #python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/dev.pip
        #python -m pip install -U -e .
    # make-install is `python -m pip install -U -e .`
    - name: Install package
      run: make install
    # - name: Compute coverage
    #   run: |
    #     coverage run -m pytest tests
    #     coverage report
    #     coverage html
    - name: Coverage compute
      run: make coverage-to-html


# FIXME/2022-09-28 02:11: Add remaining Makefile and tox checks:
#   tox: dist_check, docs, flake8, manifest, pydocstyle
#   make: coverage, coverage-html?, docs, docs-html?, cloc?




