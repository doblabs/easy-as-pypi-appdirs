name: Run checks

on:
  - push
    # What's the deal with pull_request vs. pull_request_target?
    # - If someone opens a PR from their fork, would this workflow
    #   run their (possibly malicious) code?
    #   https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks
  - pull_request

jobs:

  # *** TEST

  test:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: true
      matrix:
        # FIXME/2022-10-03 21:31: Enable these:
        #python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        #platform: [ubuntu-latest, macos-latest, windows-latest]
        # For now, testing:
        #platform: [ubuntu-latest]
        #python-version: ['3.7', '3.8']
        #platform: [ubuntu-latest, macos-latest, windows-latest]
        #python-version: ['3.7', '3.8']
        #platform: [macos-latest]
        #python-version: ['3.8']
        platform: [windows-latest]
        python-version: ['3.8']

    # Set the default shell, required for "windows-latest".
    defaults:
      run:
        shell: bash

    # MAYBE/2022-10-04 01:08: Don't bother with old Python on macOS and Windows.
    #if: (${{ matrix.platform }} == "ubuntu-latest")
    if: ("ubuntu-latest" == ${{ matrix.platform }})
    #if: (matrix.platform == "ubuntu-latest")
    #if: ${{ (matrix.platform == "ubuntu-latest") || (matrix.platform == "macos-latest" && matrix.python-version == "3.10") || (matrix.platform == "windows-latest" && matrix.python-version == "3.10") }}
    # if: ${{ (matrix.platform == "ubuntu-latest") \
    #      || (matrix.platform == "macos-latest" && matrix.python-version == "3.10") \
    #      || (matrix.platform == "windows-latest" && matrix.python-version == "3.10") }}

    steps:
    # https://github.com/actions/cache
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Cache the pip wheels (avoid re-downloading from PyPI), and give
    # install-poetry a boost. Shaves ~10s off step time, from 15s to 5s.
    # - Enable `virtualenvs-in-project` so local .venv/ is used,
    #   so cached-poetry-dependencies works.
    # REFER: https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Cache the virtualenv, avoid re-installing packages. Saves ~35s
    # from step time, from 35s to 0s (b/c skips step, because `if:`).
    # - The install-poetry doc says that, for ubuntu-latest and macos-latest,
    #   the path is:
    #     path: .venv
    #   But the the windows-latest example uses a different path.
    #     path: {cache-dir}/virtualenvs
    #   (Though the cached-pip-wheels example shows `path: ~/.cache`.)
    #   And they suggest caching pip wheels, not the venv (which saves
    #   downloading from PyPI, but not from installing).
    #   - REFER: https://github.com/snok/install-poetry/#running-on-windows
    # - The Peterbe article adds the Yaml hash to the key, which seems legit.
    #   The causes a cache miss if you edit this file, causing a fresh install...
    #   though maybe we don't need to be that aggressive?
    #   - REFER: https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `.venv`.
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with test

    # LATER: Test on Windows, and see what VENV is.
    # - Ubuntu: VENV=.venv/bin/activate
    - name: Dump VENV
      run: echo "${VENV}"
      shell: bash

    - name: Test
      run: |
        # # So that windows-latest works, use the environ, not a hardcoded path.
        # # On Ubuntu, this is essentially:
        # #  source .venv/bin/activate
        # source $VENV

        #poetry run python -m pytest tests/ --import-mode importlib
        #python -m pytest tests/
        # FIXME/2022-10-03 20:56: Where did I see coverage being run for tests?
        # - Do I care about coverage for all Python versions?
        # - Also, the README badge only shows one coverage...
        #   can you combine coverage from different version runs?
        # - I think maybe stick to the `coverage` job, below...
        #     run: make coverage-to-html
        #  python -m coverage run -m pytest tests/
        #  python -m coverage report

        make test
        # DEV: If you need to test a specific function or class, try, e.g.,:
        #   poetry run python -m pytest -k test_function tests/

      # FIXME: I don't think we need `PLATFORM`, it was probably for tox.
      env:
        PLATFORM: ${{ matrix.platform }}

  # *** SAVVY

  # While it might be nice to isolate jobs in separate Yaml files, each
  # file is its own workflow, and each workflow appears separately under
  # the Actions workflow list, so easier to examine results if you keep
  # all jobs related to the same push or PR within the same workflow
  # (at least when possible: workflows that run after checks complete,
  #  like the coverage workflow, cannot be combined herein).

  # *** LINT

  lint:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Suss psuedo subproject name
      run: echo "BASENAME_LINT=$(echo "$(grep -e 'BASENAME_LINT = ' Makefile | sed 's/^.* = //')")" >> $GITHUB_ENV
      shell: bash
    - name: Dump BASENAME_LINT
      run: echo "${{ env.BASENAME_LINT }}"
      shell: bash

    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `poetry-shell-lint/.venv`.
        # Because the psuedo subproject is used, use subproject's `.venv/`.
        path: ${{ env.BASENAME_LINT }}/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      # We use `make` for this `poetry install`, though we could just as easily:
      #   run: cd poetry-shell-lint && poetry install --no-interaction --no-root
      # Using `make` keeps this more maintainable, or DRY... except in comments.
      run: make install-pkgs-docs

    - name: Lint
      run: make lint

  # *** DOCS

  docs:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `.venv`.
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #run: poetry install --with dev,docs,test
      #run: poetry install --with dist,docs,test
      #run: poetry install --with docs
      run: poetry install --no-interaction --with docs

    # FIXME/2022-10-03 22:07: Not .venv, so cache not saved.
    - name: Print ls
      run: ls -la
      shell: bash

    - name: Docs build
      run: make docs-html

  # *** DIST

  dist-check:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `.venv`.
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #run: poetry install --with dist
      run: poetry install --no-interaction --no-root --with dist
      # FIXME/2022-10-03 21:12: I'm seeing an error but did before,
      # possibly because --no-root? Seems weird.
      #  ERROR: You must setup the Poetry virtual environment first.
      #  - Hint: Try running `make develop`.

    - name: Dist check
      run: make check-dist

  # *** VERIFY pyproject.toml

  poetry-check:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      # with:
      #   virtualenvs-create: true
      #   virtualenvs-in-project: true

    - name: Poetry check
      run: make check-project

  # *** PYDOCSTYLE

  # Note that adding Docstrings can be tedious. For many projects, they
  # might not add value. So oftentimes you'll want to disable this job:
  #
  #   pydocstyle:
  #     if: ${{ false }}

  pydocstyle:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `.venv`.
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #run: poetry install --with docstyle
      run: poetry install --no-interaction --no-root --with docstyle

    - name: Docstring check
      run: make check-pydocstyle

  # *** COVERAGE

  coverage:
    runs-on: ubuntu-latest

    # FIXME/2022-10-04 00:33: REMOVE_IFs:
    if: ${{ false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.7

    # SYNC_ME_0: The next two steps are the same for many jobs in this document.
    - name: Load cached $HOME/.local
      uses: actions/cache@v3
      with:
        path: ~/.local
        # Invalidate the cache whenever this Yaml changes.
        key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # SYNC_ME_1: The next two steps are the same for many jobs in this document.
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        # FIXME/2022-10-03: Until I test on Windows, using `.venv`.
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.job }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/checks.yaml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with test
    # - name: Install dependencies
    #   #run: poetry install --with test
    #   run: poetry install --no-interaction --no-root --with test

    - name: Coverage compute
      run: make coverage-to-html

