# This file exists within 'easy-as-pypi-appdirs':
#
#   https://github.com/doblabs/easy-as-pypi-appdirs#ðŸ›£

# FIXME/2022-09-30 21:17: Move herein:
# - MANIFEST.in â†’ tool.poetry.readme, tool.poetry.include, and tool.poetry.exclude

[tool.poetry]
name = "easy-as-pypi-appdirs"
version = "0.0.0"
description = "AppDirs overlay with mkdir -p side effect and Singleton access"

authors = ["Landon Bouma <landonb-pypi-eapp-appdirs@tallybark.com>"]
maintainers = ["Tally Bark LLC <tallybark-pypi-eapp-appdirs@tallybark.com>"]

license = "MIT"
readme = "README.rst"
packages = [{include = "easy_as_pypi_appdirs"}]

homepage = "https://github.com/doblabs/easy-as-pypi-appdirs"
repository = "https://github.com/doblabs/easy-as-pypi-appdirs"
documentation = "https://easy-as-pypi-appdirs.readthedocs.io/en/latest"

# Keywords for PyPI to display, and to use for search results.
keywords = ["appdirs", "mkdir"]

# REFER: https://pypi.org/classifiers/
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",

    # Python classifiers are set automatically:
    # # See list of supported Python versions:
    # #   https://devguide.python.org/versions/
    # "Programming Language :: Python",
    # "Programming Language :: Python :: 3",
    # "Programming Language :: Python :: 3.7",
    # "Programming Language :: Python :: 3.8",
    # "Programming Language :: Python :: 3.9",
    # "Programming Language :: Python :: 3.10",
    # # LATER/2022-09-27: Pending official 3.11 release:
    # #  "Programming Language :: Python :: 3.11",

    # License is set automatically:
    #  "License :: OSI Approved :: MIT License",
]

include = [
    # HINT: Files are included in both sdist and wheel, or you can choose, e.g.,
    #   { path = "tests", format = "sdist" },
    #   { path = "for_wheel.txt", format = ["sdist", "wheel"] }
    "LICENSE",
    "Makefile",
    "*.rst",
    "pyproject.toml",

    # FIXME/2022-10-02 18:24: Remove these:
    #"setup.cfg",
    #"setup.py",

    # FIXME/2022-09-30 22:04: What about the MANIFEST.in `graft`'s?
    # graft easy_as_pypi_appdirs
    # graft docs
    # prune docs/_build
    # prune docs/_static
    # exclude docs/modules.rst
    # recursive-exclude docs easy_as_pypi_appdirs*.rst
    # exclude docs/history-ci.md
    # include LICENSE
    # include Makefile
    # include *.rst
    # include pyproject.toml
    # include setup.cfg
    # include setup.py
    # graft requirements
    # graft tests
]
exclude = [
    # SPIKE: Is this list necessary?
    # NOTE: This list ordered like `git ls-files`, for easy maintenance.
    ".coveragerc",
    ".editorconfig",
    ".flake8",
    ".gitignore",
    ".ignore.example",
    ".readthedocs.yml",
    "Makefile.local.example",
    #"MANIFEST.in",
    "codecov.yml",
    #"tox.ini",

    # SPIKE: Verify if you need to deliberately exclude these or not:
    ".tox",
    ".coverage",
    "htmlcov",

    # SPIKE: Not sure this is necessary...
    # ALSO: These were `global-exclude` in MANIFEST.in...
    # - So would these need to be, like, "**/*.so" or something?
    "*.py[cod]",
    "__pycache__",
    "*.so",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/doblabs/easy-as-pypi-appdirs/issues"
"Documentation" = "https://easy-as-pypi-appdirs.readthedocs.io/en/latest"
"Source Code" = "https://github.com/doblabs/easy-as-pypi-appdirs"

# ***

[tool.poetry.dependencies]
python = "^3.7"
appdirs = ">=1.4.4"

# ***

# Not using the special `dev` group:
#
#   [tool.poetry.group.dev.dependencies]

# ***

# Specify package(s) for verifying the build.

[tool.poetry.group.dist]
optional = true

[tool.poetry.group.dist.dependencies]
# - "Collection of utilities for publishing packages on PyPI"
#   - We use Poetry to publish to PyPI, but we also run `twine check`
#     (which might be redundant, because we also run `poetry check`).
#
#   https://twine.readthedocs.io/en/latest/
#   https://pypi.org/project/twine
twine = ">=3.1.1"

# ***

# Specify packages for local testing with and without
# tox, as well as for testing on the CI servers.

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
# - "generic virtualenv management and test command line tool"
#
#   https://tox.readthedocs.io/en/latest/
#   https://pypi.org/project/tox
# FIXME/2022-09-30 21:00: Which tox? pyenv plugin? Poetry plugin?
# - tox-pyenv
tox = "^3.14.3"

# **** pytest Framework & Related

# - "pytest: simple powerful testing with Python"
#
#   https://docs.pytest.org/en/latest/
#   https://pypi.org/project/pytest
pytest = ">=7.1.3"

# - "Thin-wrapper around the mock package for easier use with pytest"
#
#   https://github.com/pytest-dev/pytest-mock/
#   https://pypi.org/project/pytest-mock
pytest-mock = ">=3.9.0"

# **** Coverage

# - "Code coverage measurement for Python"
#
#   https://coverage.readthedocs.io/en/latest/
#   https://pypi.org/project/coverage
coverage = ">=6.5.0"

# - "Pytest plugin for measuring coverage"
#
#   https://github.com/pytest-dev/pytest-cov
#   https://pypi.org/project/pytest-cov
pytest-cov = ">=4.0.0"

# *** Fakers and Factories.

# - "package that generates fake data for you"
#
#   https://github.com/joke2k/faker
#   https://pypi.org/project/Faker
Faker = ">=15.0.0"

# - "Generates random data for your tests"
#
#   https://github.com/omaciel/fauxfactory
#   https://pypi.org/project/fauxfactory
fauxfactory = ">=3.1.0"

# ***

[tool.poetry.group.docstyle]
optional = true

# Specify packages required to lint the documentation.
[tool.poetry.group.docstyle.dependencies]
# - Python docstring checker.
#
#   https://github.com/PyCQA/pydocstyle/
#   https://pypi.org/project/pydocstyle
pydocstyle = ">=6.1.1"

# - "Python lib for TOML."
#
#   https://github.com/uiri/toml
#   https://pypi.org/project/toml
#
# - We include `toml` so `pydocstyle` can validate `pyproject.toml` (this file).
#   - And avoids warning on `pydocstyle`:
#       WARNING: The /path/to/package/pyproject.toml configuration file was
#                ignored, because the `toml` package is not installed.
toml = ">=0.10.2"

# ***

[tool.poetry.group.docs]
optional = true

# Specify packages required to build the documentation.
[tool.poetry.group.docs.dependencies]
# - "Python documentation generator"
#
#   https://www.sphinx-doc.org/en/master/
#   https://pypi.org/project/Sphinx
Sphinx = ">=5.2.3"

# - "Read the Docs theme for Sphinx"
#
#   https://github.com/readthedocs/sphinx_rtd_theme
#   https://pypi.org/project/sphinx_rtd_theme
sphinx_rtd_theme = ">=0.4.3"

# - "Python API and shell utilities to monitor file system events."
#
#   https://github.com/gorakhargosh/watchdog
#   https://pypi.org/project/watchdog
watchdog = ">=2.1.9"

# ***

# Specify packages for ....

[tool.poetry.group.extras]
optional = true

[tool.poetry.group.extras.dependencies]
# - "Render local readme files before sending off to GitHub"
#   - For previewing docs/history-ci.md.
#
#   https://github.com/joeyespo/grip
#   https://pypi.org/project/grip
grip = ">=4.6.1"

# - "utility / library to sort Python imports"
#
#   https://github.com/timothycrosley/isort
#   https://pypi.org/project/isort
isort = ">=5.10.1"

# - "A viewer for ReStructuredText documents that renders them on the fly."
#   - For previewing README.rst.
#
#   https://mg.pov.lt/restview/
#   https://pypi.org/project/restview
restview = ">=3.0.0"

# ***

# - In the old days of setuptools and wheel, one could use setuptools_scm to
#   have the build automatically detect the version from your VCS.
#   - Here's the Poetry equivalent, as a plugin.
#     https://github.com/mtkennerly/poetry-dynamic-versioning
[tool.poetry-dynamic-versioning]
enable = true

# The default Poetry build-system is these two lines:
#   requires = ["poetry-core"]
#   build-backend = "poetry.core.masonry.api"
# But we use poetry-dynamic-versioning so we don't have to maintain
# the `version` variable atop this file.
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

# ***

# pytest options
# ==============
#
# - pytest settings can be set in any of these files:
#
#     pytest.ini / pyproject.toml / tox.ini / setup.cfg
#
#   though it's recommended to avoid the latter.
#
# - Ref:
#
#     https://docs.pytest.org/en/stable/customize.html#setup-cfg
#
# - Hint:
#
#  --strict-markers   markers not registered in the `markers` section
#                     of the configuration file raise errors.
#
#  --tb=style         traceback print mode (auto/long/short/line/native/no).
#
#  -r chars           show extra test summary info as specified by chars:
#                     (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed,
#                     (p)assed, (P)assed with output, (a)ll except passed
#                     (p/P), or (A)ll.  (w)arnings are enabled by default
#                     (see --disable-warnings),  'N' can be used to reset
#                     the list. (default: 'fE').
#
[tool.pytest.ini_options]
addopts = "--tb=short --strict-markers -ra"

[tool.coverage.report]
precision = 0

[tool.coverage.run]
branch = true
source = "easy_as_pypi_appdirs"

[tool.doc8]
# The poetry-shell-lint/.venv/ path is from checks.yaml's `lint` GitHub Actions job.
ignore-path = [".eggs/", "*.egg-info/", ".tox/", "docs/_build/", "poetry-shell-lint/.venv/"]
max-line-length = 89
# Here's an old note: "Specify encoding lest doc8 think it's 'Windows-1254'
#                      and raise UnicodeDecodeError."
file-encoding = "utf-8"
# If you need to ignore specific errors in a specific file:
#  ignore-path-errors=/tmp/other_thing.rst;D001;D002
# DEVs: Uncomment verbose for TMI.
#  verbose = 1

[tool.isort]
# The line_length should match similar values applied to doc8 and flake8.
line_length = 89
# multi_line_output: 3 - Vertical Hanging Indent.
multi_line_output = 3
not_skip = ["__init__.py"]
known_third_party = [
    # SYNC_ME: setup.py:requirements
    #
    # *** External packages
    "appdirs",
    # *** Testing packages
    "factory",
    "faker",
    "fauxfactory",
    "freezegun",
    "pytest",
    "pytest_factoryboy",
]

